name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v0.0.1'
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04-arm, macos-latest, windows-latest ]
        go-version: [ '1.23.3' ]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
            sudo apt-get update
            # gcc
            sudo apt-get install -y gcc libc6-dev
            # x11
            sudo apt-get install -y libx11-dev xorg-dev libxtst-dev
            # Clipboard
            sudo apt-get install -y xsel xclip
            # Bitmap
            sudo apt-get install -y libpng++-dev
            # GoHook
            sudo apt-get install -y xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install libpng libjpeg libx11
          fi

      - name: Install windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          $mingwUrl = "https://sourceforge.net/projects/mingw-w64/files/latest/download"
          $mingwInstallerPath = "$env:TEMP\mingw-w64-installer.exe"
          Write-Host "Downloading MinGW-w64 installer from $mingwUrl ..."
          Invoke-WebRequest -Uri $mingwUrl -OutFile $mingwInstallerPath
          Write-Host "Running MinGW-w64 installer ..."
          Start-Process -FilePath $mingwInstallerPath -ArgumentList "/SILENT" -Wait
          $mingwPath = "C:\mingw64"
          if (Test-Path $mingwPath) {
            Write-Host "MinGW-w64 successfully installed at $mingwPath."
          } else {
            Write-Host "MinGW-w64 installation failed. Please check the installation logs."
            exit 1
          }
          $currentPath = [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::Machine)
          if ($currentPath -contains "$mingwPath\bin") {
            Write-Host "MinGW-w64 path already added to system PATH."
          } else {
            $newPath = "$currentPath;$mingwPath\bin"
            [System.Environment]::SetEnvironmentVariable("Path", $newPath, [System.EnvironmentVariableTarget]::Machine)
            Write-Host "MinGW-w64 path added to system PATH."
          }
          Write-Host "Checking GCC version..."
          $gccVersion = gcc --version
          if ($gccVersion) {
            Write-Host "GCC is installed and available:"
            Write-Host $gccVersion
          } else {
            Write-Host "GCC is not available. Please check your installation."
          }
          Remove-Item $mingwInstallerPath
          Write-Host "Cleaned up installer file."

      - name: Build
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            platforms=(
              "linux/amd64"
            )
          elif [[ "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
            platforms=(
              "linux/arm64"
            )
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            platforms=(
              "darwin/amd64"
              "darwin/arm64"
            )
          fi
          
          repo_name="${{ github.event.repository.name }}"
          prefix="${repo_name//-/_}_${{ steps.get-tag.outputs.tag }}"
          
          for platform in "${platforms[@]}"; do
            os=$(echo $platform | cut -d/ -f1)
            arch=$(echo $platform | cut -d/ -f2)
            GOOS=$os GOARCH=$arch CGO_ENABLED=1 go build -o dist/${prefix}_${os}_${arch}
          done

      - name: Build windows
        if: matrix.os == 'windows-latest'
        run: |
          $repo_name = "${{ github.event.repository.name }}"
          $prefix = $repo_name -replace "-", "_"
          $prefix = "${prefix}_${{ steps.get-tag.outputs.tag }}"
          $platforms = @("windows/amd64", "windows/arm64")
          for ($i = 0; $i -lt $platforms.Length; $i++) {
            $platform = $platforms[$i]
            $os, $arch = $platform.Split('/')
            $env:GOOS = $os
            $env:GOARCH = $arch
            go build -o "dist/${prefix}_${os}_${arch}"
          }

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          makeLatest: false
          tag: ${{ steps.get-tag.outputs.tag }}
          artifacts: 'dist/*'
          token: ${{ secrets.GITHUB_TOKEN }}