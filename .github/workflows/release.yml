name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g. v1.0.0)'
        required: true
        default: 'v0.0.1'
  push:
    tags:
      - v*.*.*

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04-arm, macos-latest ]
        go-version: [ '1.23.3' ]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Get release tag
        id: get-tag
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" || "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
            sudo apt-get update
            # gcc
            sudo apt-get install -y gcc libc6-dev
            # x11
            sudo apt-get install -y libx11-dev xorg-dev libxtst-dev
            # Clipboard
            sudo apt-get install -y xsel xclip
            # Bitmap
            sudo apt-get install -y libpng++-dev
            # GoHook
            sudo apt-get install -y xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev
            # ARM64
            if [[ "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
              sudo apt-get install gcc-aarch64-linux-gnu
              # For kylin
              wget http://ftp.gnu.org/gnu/libc/glibc-2.31.tar.gz
              tar -xvzf glibc-2.31.tar.gz
              cd glibc-2.31
              mkdir build
              cd build
              ../configure --prefix=/opt/glibc-2.31
              make -j$(nproc)
              sudo make install
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
              export LD_LIBRARY_PATH=/opt/glibc-2.31/lib:$LD_LIBRARY_PATH
              export LIBRARY_PATH=/opt/glibc-2.31/lib:$LIBRARY_PATH
              export C_INCLUDE_PATH=/opt/glibc-2.31/include:$C_INCLUDE_PATH
              export CPLUS_INCLUDE_PATH=/opt/glibc-2.31/include:$CPLUS_INCLUDE_PATH
            fi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install libpng libjpeg libx11
          fi

      - name: Build
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            platforms=(
              "linux/amd64"
            )
          elif [[ "${{ matrix.os }}" == "ubuntu-22.04-arm" ]]; then
            platforms=(
              "linux/arm64"
            )
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            platforms=(
              "darwin/amd64"
              "darwin/arm64"
            )
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            platforms=(
              "windows/amd64"
              "windows/arm64"
            )
          fi
          
          repo_name="${{ github.event.repository.name }}"
          prefix="${repo_name//-/_}_${{ steps.get-tag.outputs.tag }}"
      
          for platform in "${platforms[@]}"; do
            os=$(echo $platform | cut -d/ -f1)
            arch=$(echo $platform | cut -d/ -f2)
            GOOS=$os GOARCH=$arch CGO_ENABLED=1 go build -o dist/${prefix}_${os}_${arch}
          done

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          draft: true
          allowUpdates: true
          makeLatest: false
          tag: ${{ steps.get-tag.outputs.tag }}
          artifacts: 'dist/*'
          token: ${{ secrets.GITHUB_TOKEN }}
